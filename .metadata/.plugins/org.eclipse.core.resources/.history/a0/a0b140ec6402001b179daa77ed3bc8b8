package lab3.homework;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class Person_ {
	private Sex_class implicit_data;
	
    public enum Sex {Male, Female};
    
    private ArrayList<Double> probabilityHospital;
    private ArrayList<Double> probabilityHospitalDeath;
    private ArrayList<Double> probabilitySuddenDeath;
    private Integer age;
    private Integer daysInHospital;
    private Boolean dead = false;
    private Integer index;
    
    public Sex sex_data;

    public Sex getSex_data() {
		return implicit_data.sex_info;
	}

	public Person_(ArrayList<Double> probsHospital, ArrayList<Double> probsHospitalDeath,
            ArrayList<Double> probsSuddenDeath, Integer age_person, Sex sex, Integer index_data) {
		
		this.implicit_data = personFactory.add_person(sex);
		
		this.probabilityHospital = probsHospital;
		this.probabilityHospitalDeath = probsHospitalDeath;
		this.probabilitySuddenDeath = probsSuddenDeath;
		this.age = age_person;
		this.index = index_data;
		this.dead = false;
		this.daysInHospital = 6;
		
    	System.out.println("Creating person object: " + sex);
    }
    /*
    public void Person_set(ArrayList<Double> probsHospital, ArrayList<Double> probsHospitalDeath,
            ArrayList<Double> probsSuddenDeath, Integer age, Sex sex, Integer index) {
    	
         
         person_age_Map.put(index, age);
         problsHospital_Map.put(index, probsHospital);
         problsHospitalDeath_Map.put(index, probsHospitalDeath);
         problsSuddenDeath_Map.put(index, probsSuddenDeath);
         dead_Map.put(index, false);
         hospital_d_Map.put(index, -1);
         sex_Map.put(index, sex);
    	
    }
    
    public Sex get_sex(){
    	return sex;
    }
    */
    public String newDay(Integer total_index) {
    	
        //If dead, do nothing
        if (this.dead) return "";

        //Calculate what age group this person belongs to
        int myGroup = 0;
        while (age > ageGroups.get(myGroup)) {
            myGroup++;
        }
        // create random object
        Random randomno = new Random();
        
        if (daysInHospital>0) { //If still in hospital, reduce days left in hospital
        	//hospital_d_Map.put(total_index,this.daysInHospital - 1);
        	this.daysInHospital - 1
        	
        } else if (daysInHospital == 0) { //If at the end of hospital stay, see if dies or lives
            
        	hospital_d_Map.put(total_index,this.daysInHospital - 1);
            if (randomno.nextDouble() < probabilityHospitalDeath.get(myGroup)) {
                //this.dead = true;
            	dead_Map.put(total_index, true);

                return "Agent "+index+" ("+sex+", age: "+age+") died in hospital";
            }
        } else { //Person not in hospital
            	//Chance of sudden death
      
            if ( randomno.nextDouble() < probabilitySuddenDeath.get(myGroup)) {
            	dead_Map.put(total_index, true);
                return "Agent "+index+" ("+sex+", age: "+age+") died a sudden death";
            } else {
                //Chance of hospitalization
                if (randomno.nextDouble() < probabilityHospital.get(myGroup)) {
                	hospital_d_Map.put(total_index,6);
                    return "Agent "+index+" ("+sex+", age: "+age+") hospitalized";
                }
            }
        }
        return "";
    }
    
    public Sex getSex() {
    	
    	return this.sex;
    }
}
